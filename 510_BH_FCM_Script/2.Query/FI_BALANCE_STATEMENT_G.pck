CREATE OR REPLACE PACKAGE FI_BALANCE_STATEMENT_G
AS

-- 계정잔액명세 잔액 조회.
  PROCEDURE SELECT_BALANCE_STATEMENT
            ( P_CURSOR               OUT TYPES.TCURSOR
            , W_GL_DATE              IN FI_BALANCE_STATEMENT.GL_DATE%TYPE
            , W_ACCOUNT_CONTROL_ID   IN FI_BALANCE_STATEMENT.ACCOUNT_CONTROL_ID%TYPE
            , W_SOB_ID               IN FI_BALANCE_STATEMENT.SOB_ID%TYPE
            );

-- 계정잔액명세서 잔액수정.
  PROCEDURE UPDATE_BALANCE_STATEMENT
            ( W_GL_DATE             IN FI_BALANCE_STATEMENT.GL_DATE%TYPE
            , W_ACCOUNT_CONTROL_ID  IN FI_BALANCE_STATEMENT.ACCOUNT_CONTROL_ID%TYPE
            , W_CURRENCY_CODE       IN FI_BALANCE_STATEMENT.CURRENCY_CODE%TYPE
            , W_ITEM_GROUP_ID       IN FI_BALANCE_STATEMENT.ITEM_GROUP_ID%TYPE
            , W_SOB_ID              IN FI_BALANCE_STATEMENT.SOB_ID%TYPE
            , P_REMAIN_AMOUNT       IN FI_BALANCE_STATEMENT.REMAIN_AMOUNT%TYPE
            , P_CURR_REMAIN_AMOUNT  IN FI_BALANCE_STATEMENT.CURR_REMAIN_AMOUNT%TYPE
            , P_DESCRIPTION         IN FI_BALANCE_STATEMENT.DESCRIPTION%TYPE
            , P_USER_ID             IN FI_BALANCE_STATEMENT.CREATED_BY%TYPE
            );

-- 계정잔액명세서 잔액삭제.
  PROCEDURE DELETE_BALANCE_STATEMENT
            ( W_GL_DATE             IN FI_BALANCE_STATEMENT.GL_DATE%TYPE
            , W_ACCOUNT_CONTROL_ID  IN FI_BALANCE_STATEMENT.ACCOUNT_CONTROL_ID%TYPE
            , W_CURRENCY_CODE       IN FI_BALANCE_STATEMENT.CURRENCY_CODE%TYPE
            , W_ITEM_GROUP_ID       IN FI_BALANCE_STATEMENT.ITEM_GROUP_ID%TYPE
            , W_SOB_ID              IN FI_BALANCE_STATEMENT.SOB_ID%TYPE
            );

-----------------------------------------------------------------------------------------
-- 환산평가를 위한 환율 관리.
  PROCEDURE SELECT_STATEMENT_EXCHANGE
            ( P_CURSOR1             OUT TYPES.TCURSOR1
            , W_GL_DATE             IN FI_BALANCE_STATEMENT_EXCHANGE.GL_DATE%TYPE
            , W_CURRENCY_CODE       IN FI_BALANCE_STATEMENT_EXCHANGE.CURRENCY_CODE%TYPE
            , W_SOB_ID              IN FI_BALANCE_STATEMENT_EXCHANGE.SOB_ID%TYPE            
            );

-- 환산평가를 위한 환율 삽입.
  PROCEDURE INSERT_STATEMENT_EXCHANGE
            ( P_GL_DATE       IN FI_BALANCE_STATEMENT_EXCHANGE.GL_DATE%TYPE
            , P_CURRENCY_CODE IN FI_BALANCE_STATEMENT_EXCHANGE.CURRENCY_CODE%TYPE
            , P_SOB_ID        IN FI_BALANCE_STATEMENT_EXCHANGE.SOB_ID%TYPE
            , P_EXCHANGE_RATE IN FI_BALANCE_STATEMENT_EXCHANGE.EXCHANGE_RATE%TYPE
            , P_DESCRIPTION   IN FI_BALANCE_STATEMENT_EXCHANGE.DESCRIPTION%TYPE
            , P_USER_ID       IN FI_BALANCE_STATEMENT_EXCHANGE.CREATED_BY%TYPE 
            );

-- 환산평가를 위한 환율 수정.
  PROCEDURE UPDATE_STATEMENT_EXCHANGE
            ( W_GL_DATE       IN FI_BALANCE_STATEMENT_EXCHANGE.GL_DATE%TYPE
            , W_CURRENCY_CODE IN FI_BALANCE_STATEMENT_EXCHANGE.CURRENCY_CODE%TYPE
            , W_SOB_ID        IN FI_BALANCE_STATEMENT_EXCHANGE.SOB_ID%TYPE
            , P_EXCHANGE_RATE IN FI_BALANCE_STATEMENT_EXCHANGE.EXCHANGE_RATE%TYPE
            , P_DESCRIPTION   IN FI_BALANCE_STATEMENT_EXCHANGE.DESCRIPTION%TYPE
            , P_USER_ID       IN FI_BALANCE_STATEMENT_EXCHANGE.CREATED_BY%TYPE 
            );

-- 환산평가를 위한 환율 삭제.
  PROCEDURE DELETE_STATEMENT_EXCHANGE
            ( W_GL_DATE       IN FI_BALANCE_STATEMENT_EXCHANGE.GL_DATE%TYPE
            , W_CURRENCY_CODE IN FI_BALANCE_STATEMENT_EXCHANGE.CURRENCY_CODE%TYPE
            , W_SOB_ID        IN FI_BALANCE_STATEMENT_EXCHANGE.SOB_ID%TYPE
            );

-----------------------------------------------------------------------------------------
-- 계정잔액명세서 생성 전표 라인 조회.
  PROCEDURE SELECT_BALANCE_STATEMENT_SLIP
            ( P_CURSOR1             OUT TYPES.TCURSOR1
            , W_GL_DATE             IN FI_BALANCE_STATEMENT.GL_DATE%TYPE
            , W_ACCOUNT_CONTROL_ID  IN FI_BALANCE_STATEMENT.ACCOUNT_CONTROL_ID%TYPE
            , W_CURRENCY_CODE       IN FI_BALANCE_STATEMENT.CURRENCY_CODE%TYPE
            , W_ITEM_GROUP_ID       IN FI_BALANCE_STATEMENT.ITEM_GROUP_ID%TYPE
            , W_SOB_ID              IN FI_BALANCE_STATEMENT.SOB_ID%TYPE
            );
            
-----------------------------------------------------------------------------------------
-- 계정잔액명세 잔액 조회 - PROMPT.
  PROCEDURE SELECT_STATEMENT_ITEM_PROMPT
            ( P_CURSOR1             OUT TYPES.TCURSOR1
            , W_ACCOUNT_CONTROL_ID  IN FI_BALANCE_STATEMENT_ITEM.ACCOUNT_CONTROL_ID%TYPE
            , W_SOB_ID              IN FI_BALANCE_STATEMENT_ITEM.SOB_ID%TYPE
            );
            
END FI_BALANCE_STATEMENT_G;
/
CREATE OR REPLACE PACKAGE BODY FI_BALANCE_STATEMENT_G
AS
/******************************************************************************/
/* Project      : FPCB ERP
/* Module       : HR
/* Program Name : FI_BALANCE_STATEMENT_G
/* Description  : 계정잔액명세 잔액 조회.
/*
/* Reference by :
/* Program History :
/*------------------------------------------------------------------------------
/*   Date       In Charge          Description
/*------------------------------------------------------------------------------
/* 07-JUN-2010  Jeon Ho Su          Initialize
/******************************************************************************/
-- 계정잔액명세 잔액 조회.
  PROCEDURE SELECT_BALANCE_STATEMENT
            ( P_CURSOR               OUT TYPES.TCURSOR
            , W_GL_DATE              IN FI_BALANCE_STATEMENT.GL_DATE%TYPE
            , W_ACCOUNT_CONTROL_ID   IN FI_BALANCE_STATEMENT.ACCOUNT_CONTROL_ID%TYPE
            , W_SOB_ID               IN FI_BALANCE_STATEMENT.SOB_ID%TYPE
            )
  AS
  BEGIN
    OPEN P_CURSOR FOR
      SELECT NVL(BS.ACCOUNT_CONTROL_ID, 0) AS ACCOUNT_CONTROL_ID
           , BS.ACCOUNT_CODE
           , AC.ACCOUNT_DESC           
           , NVL(FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'MANAGEMENT1_ID', BSI.MANAGEMENT1_VALUE, BSI.SOB_ID), BSI.MANAGEMENT1_VALUE) AS MANAGEMENT1_DESC
           , NVL(FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'MANAGEMENT2_ID', BSI.MANAGEMENT2_VALUE, BSI.SOB_ID), BSI.MANAGEMENT2_VALUE) AS MANAGEMENT2_DESC
           , NVL(FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'REFER1_ID', BSI.MANAGEMENT3_VALUE, BSI.SOB_ID), BSI.MANAGEMENT3_VALUE) AS MANAGEMENT3_DESC
           , NVL(FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'REFER2_ID', BSI.MANAGEMENT4_VALUE, BSI.SOB_ID), BSI.MANAGEMENT4_VALUE) AS MANAGEMENT4_DESC
           , NVL(FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'REFER3_ID', BSI.MANAGEMENT5_VALUE, BSI.SOB_ID), BSI.MANAGEMENT5_VALUE) AS MANAGEMENT5_DESC
           , NVL(FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'REFER4_ID', BSI.MANAGEMENT6_VALUE, BSI.SOB_ID), BSI.MANAGEMENT6_VALUE) AS MANAGEMENT6_DESC
           , NVL(FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'REFER5_ID', BSI.MANAGEMENT7_VALUE, BSI.SOB_ID), BSI.MANAGEMENT7_VALUE) AS MANAGEMENT7_DESC
           , NVL(FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'REFER6_ID', BSI.MANAGEMENT8_VALUE, BSI.SOB_ID), BSI.MANAGEMENT8_VALUE) AS MANAGEMENT8_DESC
           , NVL(FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'REFER7_ID', BSI.MANAGEMENT9_VALUE, BSI.SOB_ID), BSI.MANAGEMENT9_VALUE) AS MANAGEMENT9_DESC
           , NVL(FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'REFER8_ID', BSI.MANAGEMENT10_VALUE, BSI.SOB_ID), BSI.MANAGEMENT10_VALUE) AS MANAGEMENT10_DESC
           , CASE
               WHEN GROUPING(BS.ACCOUNT_CONTROL_ID) = 1 THEN EAPP_MESSAGE_G.RETURN_TEXT_F(USERENV_G.GET_TERRITORY_S_F, 'EAPP_10045', NULL)
               WHEN GROUPING(BS.GL_DATE) = 1 THEN BS.CURRENCY_CODE || ' ' || EAPP_MESSAGE_G.RETURN_TEXT_F(USERENV_G.GET_TERRITORY_S_F, 'EAPP_10062', NULL)
               ELSE BS.CURRENCY_CODE
             END AS CURRENCY_CODE
           , SUM(BS.CURR_REMAIN_AMOUNT) AS CURR_REMAIN_AMOUNT
           , SUM(BS.REMAIN_AMOUNT) AS REMAIN_AMOUNT
           , MAX(BS.NEW_EXCHANGE_RATE) AS NEW_EXCHANGE_RATE
           , SUM(BS.NEW_REMAIN_AMOUNT) AS NEW_REMAIN_AMOUNT
           , SUM(DECODE(BS.NEW_EXCHANGE_RATE, 0, 0, NVL(BS.NEW_REMAIN_AMOUNT, 0) - NVL(BS.REMAIN_AMOUNT, 0))) AS CHARGE_AMOUNT
           , BS.DESCRIPTION
           , BSI.MANAGEMENT1_VALUE
           , BSI.MANAGEMENT2_VALUE
           , BSI.MANAGEMENT3_VALUE
           , BSI.MANAGEMENT4_VALUE
           , BSI.MANAGEMENT5_VALUE
           , BSI.MANAGEMENT6_VALUE
           , BSI.MANAGEMENT7_VALUE
           , BSI.MANAGEMENT8_VALUE
           , BSI.MANAGEMENT9_VALUE
           , BSI.MANAGEMENT10_VALUE
           , MAX(BS.GL_DATE) AS GL_DATE
           , NVL(BS.ITEM_GROUP_ID, 0) AS ITEM_GROUP_ID
           , BA.CONTROL_CURRENCY_YN
           , BA.ESTIMATE_YN
           , DECODE(GROUPING(BS.GL_DATE), 1, 'Y', 'N') AS SUMMARY_YN
        FROM FI_BALANCE_STATEMENT BS
          , FI_BALANCE_ACCOUNTS BA
          , FI_ACCOUNT_CONTROL AC
          , FI_BALANCE_STATEMENT_ITEM_V BSI
       WHERE BS.ACCOUNT_CONTROL_ID  = BA.ACCOUNT_CONTROL_ID
         AND BS.SOB_ID              = BA.SOB_ID
         AND BS.ACCOUNT_CONTROL_ID  = AC.ACCOUNT_CONTROL_ID
         AND BS.SOB_ID              = AC.SOB_ID
         AND BS.ACCOUNT_CONTROL_ID  = BSI.ACCOUNT_CONTROL_ID
         AND BS.CURRENCY_CODE       = BSI.CURRENCY_CODE
         AND BS.ITEM_GROUP_ID       = BSI.ITEM_GROUP_ID
         AND BS.SOB_ID              = BSI.SOB_ID
         AND BS.GL_DATE             = W_GL_DATE
         AND BS.GL_DATE_SEQ         = 1
         AND BS.ACCOUNT_CONTROL_ID  = NVL(W_ACCOUNT_CONTROL_ID, BS.ACCOUNT_CONTROL_ID)
         AND BS.SOB_ID              = W_SOB_ID
         AND (BS.REMAIN_AMOUNT       <> 0
           OR BS.CURR_REMAIN_AMOUNT  <> 0)
      GROUP BY ROLLUP
           ((BS.ACCOUNT_CODE
           , AC.ACCOUNT_DESC
           , BS.ACCOUNT_CONTROL_ID
           , BS.CURRENCY_CODE)
           , (BS.ITEM_GROUP_ID
           , FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'MANAGEMENT1_ID', BSI.MANAGEMENT1_VALUE, BSI.SOB_ID)
           , FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'MANAGEMENT2_ID', BSI.MANAGEMENT2_VALUE, BSI.SOB_ID)
           , FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'REFER1_ID', BSI.MANAGEMENT3_VALUE, BSI.SOB_ID)
           , FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'REFER2_ID', BSI.MANAGEMENT4_VALUE, BSI.SOB_ID)
           , FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'REFER3_ID', BSI.MANAGEMENT5_VALUE, BSI.SOB_ID)
           , FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'REFER4_ID', BSI.MANAGEMENT6_VALUE, BSI.SOB_ID)
           , FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'REFER5_ID', BSI.MANAGEMENT7_VALUE, BSI.SOB_ID)
           , FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'REFER6_ID', BSI.MANAGEMENT8_VALUE, BSI.SOB_ID)
           , FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'REFER7_ID', BSI.MANAGEMENT9_VALUE, BSI.SOB_ID)
           , FI_ACCOUNT_CONTROL_ITEM_G.CONTROL_ITEM_DESC_F(BS.ACCOUNT_CONTROL_ID, AC.ACCOUNT_DR_CR, 'REFER8_ID', BSI.MANAGEMENT10_VALUE, BSI.SOB_ID)
           , BS.DESCRIPTION
           , BSI.MANAGEMENT1_VALUE
           , BSI.MANAGEMENT2_VALUE
           , BSI.MANAGEMENT3_VALUE
           , BSI.MANAGEMENT4_VALUE
           , BSI.MANAGEMENT5_VALUE
           , BSI.MANAGEMENT6_VALUE
           , BSI.MANAGEMENT7_VALUE
           , BSI.MANAGEMENT8_VALUE
           , BSI.MANAGEMENT9_VALUE
           , BSI.MANAGEMENT10_VALUE
           , BS.GL_DATE
           , BA.CONTROL_CURRENCY_YN
           , BA.ESTIMATE_YN))
      ;
  END SELECT_BALANCE_STATEMENT;

-- 계정잔액명세서 잔액수정.
  PROCEDURE UPDATE_BALANCE_STATEMENT
            ( W_GL_DATE             IN FI_BALANCE_STATEMENT.GL_DATE%TYPE
            , W_ACCOUNT_CONTROL_ID  IN FI_BALANCE_STATEMENT.ACCOUNT_CONTROL_ID%TYPE
            , W_CURRENCY_CODE       IN FI_BALANCE_STATEMENT.CURRENCY_CODE%TYPE
            , W_ITEM_GROUP_ID       IN FI_BALANCE_STATEMENT.ITEM_GROUP_ID%TYPE
            , W_SOB_ID              IN FI_BALANCE_STATEMENT.SOB_ID%TYPE
            , P_REMAIN_AMOUNT       IN FI_BALANCE_STATEMENT.REMAIN_AMOUNT%TYPE
            , P_CURR_REMAIN_AMOUNT  IN FI_BALANCE_STATEMENT.CURR_REMAIN_AMOUNT%TYPE
            , P_DESCRIPTION         IN FI_BALANCE_STATEMENT.DESCRIPTION%TYPE
            , P_USER_ID             IN FI_BALANCE_STATEMENT.CREATED_BY%TYPE
            )
  AS
    V_SYSDATE DATE := GET_LOCAL_DATE(W_SOB_ID);
  BEGIN
    UPDATE FI_BALANCE_STATEMENT BS
      SET BS.REMAIN_AMOUNT      = NVL(P_REMAIN_AMOUNT, 0)
        , BS.CURR_REMAIN_AMOUNT = NVL(P_CURR_REMAIN_AMOUNT, 0)
        , BS.DESCRIPTION        = P_DESCRIPTION
        , BS.LAST_UPDATE_DATE   = V_SYSDATE
        , BS.LAST_UPDATED_BY    = P_USER_ID
    WHERE BS.GL_DATE            = W_GL_DATE
      AND BS.GL_DATE_SEQ        = 1
      AND BS.ACCOUNT_CONTROL_ID = W_ACCOUNT_CONTROL_ID
      AND BS.CURRENCY_CODE      = W_CURRENCY_CODE
      AND BS.ITEM_GROUP_ID      = W_ITEM_GROUP_ID
      AND BS.SOB_ID             = W_SOB_ID
    ;
  END UPDATE_BALANCE_STATEMENT;

-- 계정잔액명세서 잔액삭제.
  PROCEDURE DELETE_BALANCE_STATEMENT
            ( W_GL_DATE             IN FI_BALANCE_STATEMENT.GL_DATE%TYPE
            , W_ACCOUNT_CONTROL_ID  IN FI_BALANCE_STATEMENT.ACCOUNT_CONTROL_ID%TYPE
            , W_CURRENCY_CODE       IN FI_BALANCE_STATEMENT.CURRENCY_CODE%TYPE
            , W_ITEM_GROUP_ID       IN FI_BALANCE_STATEMENT.ITEM_GROUP_ID%TYPE
            , W_SOB_ID              IN FI_BALANCE_STATEMENT.SOB_ID%TYPE
            )
  AS
  BEGIN
    DELETE FI_BALANCE_STATEMENT BS
    WHERE BS.GL_DATE            = W_GL_DATE
      AND BS.GL_DATE_SEQ        = 1
      AND BS.ACCOUNT_CONTROL_ID = W_ACCOUNT_CONTROL_ID
      AND BS.CURRENCY_CODE      = W_CURRENCY_CODE
      AND BS.ITEM_GROUP_ID      = W_ITEM_GROUP_ID
      AND BS.SOB_ID             = W_SOB_ID
    ;
  END DELETE_BALANCE_STATEMENT;

-----------------------------------------------------------------------------------------
-- 환산평가를 위한 환율 관리.
  PROCEDURE SELECT_STATEMENT_EXCHANGE
            ( P_CURSOR1             OUT TYPES.TCURSOR1
            , W_GL_DATE             IN FI_BALANCE_STATEMENT_EXCHANGE.GL_DATE%TYPE
            , W_CURRENCY_CODE       IN FI_BALANCE_STATEMENT_EXCHANGE.CURRENCY_CODE%TYPE
            , W_SOB_ID              IN FI_BALANCE_STATEMENT_EXCHANGE.SOB_ID%TYPE            
            )
  AS
  BEGIN
    OPEN P_CURSOR1 FOR
      SELECT BSE.GL_DATE
           , BSE.CURRENCY_CODE
           , BSE.EXCHANGE_RATE
           , BSE.DESCRIPTION
        FROM FI_BALANCE_STATEMENT_EXCHANGE BSE
      WHERE BSE.GL_DATE                 = W_GL_DATE
        AND BSE.CURRENCY_CODE           = NVL(W_CURRENCY_CODE, BSE.CURRENCY_CODE)
        AND BSE.SOB_ID                  = W_SOB_ID
      ORDER BY BSE.CURRENCY_CODE
      ;  
  END SELECT_STATEMENT_EXCHANGE;
  
-- 환산평가를 위한 환율 삽입.
  PROCEDURE INSERT_STATEMENT_EXCHANGE
            ( P_GL_DATE       IN FI_BALANCE_STATEMENT_EXCHANGE.GL_DATE%TYPE
            , P_CURRENCY_CODE IN FI_BALANCE_STATEMENT_EXCHANGE.CURRENCY_CODE%TYPE
            , P_SOB_ID        IN FI_BALANCE_STATEMENT_EXCHANGE.SOB_ID%TYPE
            , P_EXCHANGE_RATE IN FI_BALANCE_STATEMENT_EXCHANGE.EXCHANGE_RATE%TYPE
            , P_DESCRIPTION   IN FI_BALANCE_STATEMENT_EXCHANGE.DESCRIPTION%TYPE
            , P_USER_ID       IN FI_BALANCE_STATEMENT_EXCHANGE.CREATED_BY%TYPE 
            )
  AS
    V_SYSDATE                 DATE := GET_LOCAL_DATE(P_SOB_ID);
    V_RECORD_COUNT            NUMBER := 0;
  BEGIN
    -- 동일한 코드 존재 체크.
    BEGIN
      SELECT COUNT(BSE.CURRENCY_CODE) AS RECORD_COUNT
        INTO V_RECORD_COUNT
        FROM FI_BALANCE_STATEMENT_EXCHANGE BSE
       WHERE BSE.GL_DATE          = P_GL_DATE
         AND BSE.CURRENCY_CODE    = P_CURRENCY_CODE
         AND BSE.SOB_ID           = P_SOB_ID
      ;
    EXCEPTION WHEN OTHERS THEN
      V_RECORD_COUNT := 0;
    END;
    IF V_RECORD_COUNT <> 0 THEN
      RAISE ERRNUMS.Exist_Data;
    END IF;
    
    INSERT INTO FI_BALANCE_STATEMENT_EXCHANGE
    ( GL_DATE
    , CURRENCY_CODE 
    , SOB_ID 
    , EXCHANGE_RATE 
    , DESCRIPTION 
    , CREATION_DATE 
    , CREATED_BY 
    , LAST_UPDATE_DATE 
    , LAST_UPDATED_BY )
    VALUES
    ( P_GL_DATE
    , P_CURRENCY_CODE
    , P_SOB_ID
    , P_EXCHANGE_RATE
    , P_DESCRIPTION
    , V_SYSDATE
    , P_USER_ID
    , V_SYSDATE
    , P_USER_ID 
    );
  EXCEPTION
    WHEN ERRNUMS.Exist_Data THEN
    RAISE_APPLICATION_ERROR(-20001, EAPP_MESSAGE_G.RETURN_TEXT_F(USERENV_G.GET_TERRITORY_S_F, 'EAPP_90003', '&&FIELD_NAME:=Currency Code(통화)'));
  END INSERT_STATEMENT_EXCHANGE;

-- 환산평가를 위한 환율 수정.
  PROCEDURE UPDATE_STATEMENT_EXCHANGE
            ( W_GL_DATE       IN FI_BALANCE_STATEMENT_EXCHANGE.GL_DATE%TYPE
            , W_CURRENCY_CODE IN FI_BALANCE_STATEMENT_EXCHANGE.CURRENCY_CODE%TYPE
            , W_SOB_ID        IN FI_BALANCE_STATEMENT_EXCHANGE.SOB_ID%TYPE
            , P_EXCHANGE_RATE IN FI_BALANCE_STATEMENT_EXCHANGE.EXCHANGE_RATE%TYPE
            , P_DESCRIPTION   IN FI_BALANCE_STATEMENT_EXCHANGE.DESCRIPTION%TYPE
            , P_USER_ID       IN FI_BALANCE_STATEMENT_EXCHANGE.CREATED_BY%TYPE 
            )
  AS
    V_SYSDATE DATE := GET_LOCAL_DATE(W_SOB_ID);
  BEGIN
    UPDATE FI_BALANCE_STATEMENT_EXCHANGE
      SET EXCHANGE_RATE    = P_EXCHANGE_RATE
        , DESCRIPTION      = P_DESCRIPTION
        , LAST_UPDATE_DATE = V_SYSDATE
        , LAST_UPDATED_BY  = P_USER_ID
    WHERE GL_DATE          = W_GL_DATE
      AND CURRENCY_CODE    = W_CURRENCY_CODE
      AND SOB_ID           = W_SOB_ID
    ;
  END UPDATE_STATEMENT_EXCHANGE;

-- 환산평가를 위한 환율 삭제.
  PROCEDURE DELETE_STATEMENT_EXCHANGE
            ( W_GL_DATE       IN FI_BALANCE_STATEMENT_EXCHANGE.GL_DATE%TYPE
            , W_CURRENCY_CODE IN FI_BALANCE_STATEMENT_EXCHANGE.CURRENCY_CODE%TYPE
            , W_SOB_ID        IN FI_BALANCE_STATEMENT_EXCHANGE.SOB_ID%TYPE
            )
  AS
  BEGIN
    DELETE FROM FI_BALANCE_STATEMENT_EXCHANGE
    WHERE GL_DATE          = W_GL_DATE
      AND CURRENCY_CODE    = W_CURRENCY_CODE
      AND SOB_ID           = W_SOB_ID
    ;
  END DELETE_STATEMENT_EXCHANGE;

-----------------------------------------------------------------------------------------
-- 계정잔액명세서 생성 전표 라인 조회.
  PROCEDURE SELECT_BALANCE_STATEMENT_SLIP
            ( P_CURSOR1             OUT TYPES.TCURSOR1
            , W_GL_DATE             IN FI_BALANCE_STATEMENT.GL_DATE%TYPE
            , W_ACCOUNT_CONTROL_ID  IN FI_BALANCE_STATEMENT.ACCOUNT_CONTROL_ID%TYPE
            , W_CURRENCY_CODE       IN FI_BALANCE_STATEMENT.CURRENCY_CODE%TYPE
            , W_ITEM_GROUP_ID       IN FI_BALANCE_STATEMENT.ITEM_GROUP_ID%TYPE
            , W_SOB_ID              IN FI_BALANCE_STATEMENT.SOB_ID%TYPE
            )
  AS
  BEGIN
    OPEN P_CURSOR1 FOR
      SELECT TO_CHAR(BSS.GL_DATE, 'YYYY-MM-DD') AS GL_DATE
           , CASE
               WHEN GROUPING(BSS.GL_DATE) = 1 THEN EAPP_MESSAGE_G.RETURN_TEXT_F(USERENV_G.GET_TERRITORY_S_F, 'EAPP_10045', NULL)
               ELSE SL.REMARK
             END AS REMARK
           , SUM(BSS.DR_AMOUNT) AS DR_AMOUNT
           , SUM(BSS.CR_AMOUNT) AS CR_AMOUNT
           , CASE
               WHEN GROUPING(BSS.GL_DATE) = 1 THEN
                 SUM(CASE AC.ACCOUNT_DR_CR
                       WHEN '1' THEN NVL(BSS.DR_AMOUNT, 0) - NVL(BSS.CR_AMOUNT, 0) 
                       WHEN '2' THEN NVL(BSS.CR_AMOUNT, 0) - NVL(BSS.DR_AMOUNT, 0) 
                     END) 
               ELSE 0
             END AS REMAIN_AMOUNT
           , SL.CURRENCY_CODE
           , CASE
               WHEN GROUPING(BSS.GL_DATE) = 1 THEN NULL
               ELSE MAX(SL.EXCHANGE_RATE)
             END AS EXCHANGE_RATE
           , SUM(BSS.DR_CURR_AMOUNT) AS DR_CURR_AMOUNT
           , SUM(BSS.CR_CURR_AMOUNT) AS CR_CURR_AMOUNT
           , CASE
               WHEN GROUPING(BSS.GL_DATE) = 1 THEN
                 SUM(CASE AC.ACCOUNT_DR_CR
                       WHEN '1' THEN NVL(BSS.DR_CURR_AMOUNT, 0) - NVL(BSS.CR_CURR_AMOUNT, 0) 
                       WHEN '2' THEN NVL(BSS.CR_CURR_AMOUNT, 0) - NVL(BSS.DR_CURR_AMOUNT, 0) 
                     END) 
               ELSE 0
             END AS REMAIN_CURR_AMOUNT
           , SL.GL_NUM
           , NVL(BSS.SLIP_LINE_ID, 0) AS SLIP_LINE_ID
           , NVL(BSS.SLIP_HEADER_ID, 0) AS SLIP_HEADER_ID
        FROM FI_BALANCE_STATEMENT_SLIP BSS
          , FI_ACCOUNT_CONTROL AC
          , FI_SLIP_LINE SL
      WHERE BSS.ACCOUNT_CONTROL_ID      = AC.ACCOUNT_CONTROL_ID
        AND BSS.SOB_ID                  = AC.SOB_ID
        AND BSS.SLIP_LINE_ID            = SL.SLIP_LINE_ID
        AND BSS.GL_DATE                 <= W_GL_DATE
        AND BSS.ACCOUNT_CONTROL_ID      = W_ACCOUNT_CONTROL_ID
        AND BSS.CURRENCY_CODE           = W_CURRENCY_CODE
        AND BSS.ITEM_GROUP_ID           = W_ITEM_GROUP_ID
        AND BSS.SOB_ID                  = W_SOB_ID
      GROUP BY ROLLUP
        ((BSS.GL_DATE
        , SL.REMARK
        , SL.CURRENCY_CODE
        , SL.GL_NUM
        , BSS.SLIP_LINE_ID
        , BSS.SLIP_HEADER_ID
         ))
      ;
  END SELECT_BALANCE_STATEMENT_SLIP;
  
-----------------------------------------------------------------------------------------
-- 계정잔액명세 잔액 조회 - PROMPT.
  PROCEDURE SELECT_STATEMENT_ITEM_PROMPT
            ( P_CURSOR1             OUT TYPES.TCURSOR1
            , W_ACCOUNT_CONTROL_ID  IN FI_BALANCE_STATEMENT_ITEM.ACCOUNT_CONTROL_ID%TYPE
            , W_SOB_ID              IN FI_BALANCE_STATEMENT_ITEM.SOB_ID%TYPE
            )
  AS
  BEGIN
    OPEN P_CURSOR1 FOR
      SELECT 'ACCOUNT_CONTROL_ID' AS ACCOUNT_CONTROL_ID
           , 'ACCOUNT_CODE' AS ACCOUNT_CODE
           , 'ACCOUNT DESC' AS ACCOUNT_DESC
           , FI_COMMON_G.ID_NAME_F(BAI.MANAGEMENT1_ID) AS MANAGEMENT1_DESC
           , FI_COMMON_G.ID_NAME_F(BAI.MANAGEMENT2_ID) AS MANAGEMENT2_DESC
           , FI_COMMON_G.ID_NAME_F(BAI.MANAGEMENT3_ID) AS MANAGEMENT3_DESC
           , FI_COMMON_G.ID_NAME_F(BAI.MANAGEMENT4_ID) AS MANAGEMENT4_DESC
           , FI_COMMON_G.ID_NAME_F(BAI.MANAGEMENT5_ID) AS MANAGEMENT5_DESC
           , FI_COMMON_G.ID_NAME_F(BAI.MANAGEMENT6_ID) AS MANAGEMENT6_DESC
           , FI_COMMON_G.ID_NAME_F(BAI.MANAGEMENT7_ID) AS MANAGEMENT7_DESC
           , FI_COMMON_G.ID_NAME_F(BAI.MANAGEMENT8_ID) AS MANAGEMENT8_DESC
           , FI_COMMON_G.ID_NAME_F(BAI.MANAGEMENT9_ID) AS MANAGEMENT9_DESC
           , FI_COMMON_G.ID_NAME_F(BAI.MANAGEMENT10_ID) AS MANAGEMENT10_DESC
           , 'N' AS ACCOUNT_CONTROL_ID_YN
           , 'N' AS ACCOUNT_CODE_YN
           , 'N' AS ACCOUNT_DESC_YN
           , NVL(BAI.ENABLED1_FLAG, 'N') AS ENABLED1_FLAG
           , NVL(BAI.ENABLED2_FLAG, 'N') AS ENABLED2_FLAG
           , NVL(BAI.ENABLED3_FLAG, 'N') AS ENABLED3_FLAG
           , NVL(BAI.ENABLED4_FLAG, 'N') AS ENABLED4_FLAG
           , NVL(BAI.ENABLED5_FLAG, 'N') AS ENABLED5_FLAG
           , NVL(BAI.ENABLED6_FLAG, 'N') AS ENABLED6_FLAG
           , NVL(BAI.ENABLED7_FLAG, 'N') AS ENABLED7_FLAG
           , NVL(BAI.ENABLED8_FLAG, 'N') AS ENABLED8_FLAG
           , NVL(BAI.ENABLED9_FLAG, 'N') AS ENABLED9_FLAG
           , NVL(BAI.ENABLED10_FLAG, 'N') AS ENABLED10_FLAG
           , BA.CONTROL_CURRENCY_YN
           , BA.ESTIMATE_YN
/*           , FI_COMMON_G.ID_NAME_F(BAI.MANAGEMENT11_ID) AS MANAGEMENT11_DESC
           , FI_COMMON_G.ID_NAME_F(BAI.MANAGEMENT12_ID) AS MANAGEMENT12_DESC
           , FI_COMMON_G.ID_NAME_F(BAI.MANAGEMENT13_ID) AS MANAGEMENT13_DESC
           , FI_COMMON_G.ID_NAME_F(BAI.MANAGEMENT14_ID) AS MANAGEMENT14_DESC
           , FI_COMMON_G.ID_NAME_F(BAI.MANAGEMENT15_ID) AS MANAGEMENT15_DESC*/
           /* -- prompt 용도이므로--
           , BAI.MANAGEMENT1_ID
           , BAI.MANAGEMENT1_CODE
           , BAI.MANAGEMENT2_ID
           , BAI.MANAGEMENT2_CODE
           , BAI.MANAGEMENT3_ID
           , BAI.MANAGEMENT3_CODE
           , BAI.MANAGEMENT4_ID
           , BAI.MANAGEMENT4_CODE
           , BAI.MANAGEMENT5_ID
           , BAI.MANAGEMENT5_CODE
           , BAI.MANAGEMENT6_ID
           , BAI.MANAGEMENT6_CODE
           , BAI.MANAGEMENT7_ID
           , BAI.MANAGEMENT7_CODE
           , BAI.MANAGEMENT8_ID
           , BAI.MANAGEMENT8_CODE
           , BAI.MANAGEMENT9_ID
           , BAI.MANAGEMENT9_CODE     
           , BAI.MANAGEMENT10_ID
           , BAI.MANAGEMENT10_CODE
           , BAI.MANAGEMENT11_ID
           , BAI.MANAGEMENT11_CODE
           , BAI.MANAGEMENT12_ID
           , BAI.MANAGEMENT12_CODE
           , BAI.MANAGEMENT13_ID
           , BAI.MANAGEMENT13_CODE
           , BAI.MANAGEMENT14_ID
           , BAI.MANAGEMENT14_CODE
           , BAI.MANAGEMENT15_ID
           , BAI.MANAGEMENT15_CODE*/
        FROM FI_BALANCE_ACCOUNTS_ITEM_V BAI
          , FI_BALANCE_ACCOUNTS BA
      WHERE BAI.ACCOUNT_CONTROL_ID      = BA.ACCOUNT_CONTROL_ID
        AND BAI.SOB_ID                  = BA.SOB_ID
        AND BAI.ACCOUNT_CONTROL_ID      = W_ACCOUNT_CONTROL_ID
        AND BAI.SOB_ID                  = W_SOB_ID
      ;
  END SELECT_STATEMENT_ITEM_PROMPT;
  
END FI_BALANCE_STATEMENT_G;
/
