CREATE OR REPLACE PACKAGE FI_CLOSING_ENDING_AMOUNT_G
AS
-- 기말금액 조회.
  PROCEDURE SELECT_ENDING_AMOUNT
            ( P_CURSOR              OUT TYPES.TCURSOR
            , W_PERIOD_NAME         IN FI_CLOSING_ENDING_AMOUNT.PERIOD_NAME%TYPE
            , W_ACCOUNT_CONTROL_ID  IN FI_CLOSING_ENDING_AMOUNT.ACCOUNT_CONTROL_ID%TYPE
            , W_SOB_ID              IN FI_CLOSING_ENDING_AMOUNT.SOB_ID%TYPE
            );
            
-- 기말금액 INSERT.
  PROCEDURE INSERT_ENDING_AMOUNT
            ( P_PERIOD_NAME        IN FI_CLOSING_ENDING_AMOUNT.PERIOD_NAME%TYPE
            , P_ACCOUNT_CONTROL_ID IN FI_CLOSING_ENDING_AMOUNT.ACCOUNT_CONTROL_ID%TYPE
            , P_SOB_ID             IN FI_CLOSING_ENDING_AMOUNT.SOB_ID%TYPE
            , P_ORG_ID             IN FI_CLOSING_ENDING_AMOUNT.ORG_ID%TYPE
            , P_ENDING_AMOUNT      IN FI_CLOSING_ENDING_AMOUNT.ENDING_AMOUNT%TYPE
            , P_REMARK             IN FI_CLOSING_ENDING_AMOUNT.REMARK%TYPE
            , P_USER_ID            IN FI_CLOSING_ENDING_AMOUNT.CREATED_BY%TYPE 
            );

-- 기말금액 UPDATE.
  PROCEDURE UPDATE_ENDING_AMOUNT
            ( W_PERIOD_NAME        IN FI_CLOSING_ENDING_AMOUNT.PERIOD_NAME%TYPE
            , W_ACCOUNT_CONTROL_ID IN FI_CLOSING_ENDING_AMOUNT.ACCOUNT_CONTROL_ID%TYPE
            , W_SOB_ID             IN FI_CLOSING_ENDING_AMOUNT.SOB_ID%TYPE
            , P_ENDING_AMOUNT      IN FI_CLOSING_ENDING_AMOUNT.ENDING_AMOUNT%TYPE
            , P_REMARK             IN FI_CLOSING_ENDING_AMOUNT.REMARK%TYPE
            , P_USER_ID            IN FI_CLOSING_ENDING_AMOUNT.CREATED_BY%TYPE 
            );

-- 기말금액 DELETE.
  PROCEDURE DELETE_ENDING_AMOUNT
            ( W_PERIOD_NAME        IN FI_CLOSING_ENDING_AMOUNT.PERIOD_NAME%TYPE
            , W_ACCOUNT_CONTROL_ID IN FI_CLOSING_ENDING_AMOUNT.ACCOUNT_CONTROL_ID%TYPE
            , W_SOB_ID             IN FI_CLOSING_ENDING_AMOUNT.SOB_ID%TYPE
            );

-- 결산금액 조회.
  PROCEDURE SELECT_CLOSING_AMOUNT
            ( P_CURSOR1             OUT TYPES.TCURSOR1
            , W_PERIOD_NAME         IN FI_CLOSING_ENDING_AMOUNT.PERIOD_NAME%TYPE
            , W_ACCOUNT_CONTROL_ID  IN FI_CLOSING_ENDING_AMOUNT.ACCOUNT_CONTROL_ID%TYPE
            , W_SOB_ID              IN FI_CLOSING_ENDING_AMOUNT.SOB_ID%TYPE
            );

-- 결산분개 조회.
  PROCEDURE SELECT_CLOSING_SLIP
            ( P_CURSOR2             OUT TYPES.TCURSOR2
            , W_PERIOD_NAME         IN FI_CLOSING_ENDING_AMOUNT.PERIOD_NAME%TYPE
            , W_ACCOUNT_CONTROL_ID  IN FI_CLOSING_ENDING_AMOUNT.ACCOUNT_CONTROL_ID%TYPE
            , W_SOB_ID              IN FI_CLOSING_ENDING_AMOUNT.SOB_ID%TYPE
            );

-- 결산분개 합계 금액 조회.
  PROCEDURE CLOSING_SLIP_SUM_P
            ( W_PERIOD_NAME         IN FI_CLOSING_ENDING_AMOUNT.PERIOD_NAME%TYPE
            , W_ACCOUNT_CONTROL_ID  IN FI_CLOSING_ENDING_AMOUNT.ACCOUNT_CONTROL_ID%TYPE
            , W_SOB_ID              IN FI_CLOSING_ENDING_AMOUNT.SOB_ID%TYPE
            , O_DR_AMOUNT           OUT NUMBER
            , O_CR_AMOUNT           OUT NUMBER
            , O_GAP_AMOUNT          OUT NUMBER
            );
            
-- 회계계정관리 LOOKUP 조회.
  PROCEDURE LU_ACCOUNT_CONTROL_CODE
            ( P_CURSOR3              OUT TYPES.TCURSOR3
            , W_SOB_ID               IN FI_ACCOUNT_CONTROL.SOB_ID%TYPE
            , W_ENABLED_YN           IN FI_ACCOUNT_CONTROL.ENABLED_FLAG%TYPE
            );
            
END FI_CLOSING_ENDING_AMOUNT_G;
/
CREATE OR REPLACE PACKAGE BODY FI_CLOSING_ENDING_AMOUNT_G
AS
/******************************************************************************/
/* Project      : FPCB ERP
/* Module       : FCM
/* Program Name : FI_CLOSING_ENDING_AMOUNT_G
/* Description  : 결산기말금액 관리
/*
/* Reference by : 관리항목에 기말금액 관리 계정 등록해서 적용.
/* Program History :
/*------------------------------------------------------------------------------
/*   Date       In Charge          Description
/*------------------------------------------------------------------------------
/* 07-JUN-2010  Jeon Ho Su          Initialize
/******************************************************************************/
-- 기말금액 조회.
  PROCEDURE SELECT_ENDING_AMOUNT
            ( P_CURSOR              OUT TYPES.TCURSOR
            , W_PERIOD_NAME         IN FI_CLOSING_ENDING_AMOUNT.PERIOD_NAME%TYPE
            , W_ACCOUNT_CONTROL_ID  IN FI_CLOSING_ENDING_AMOUNT.ACCOUNT_CONTROL_ID%TYPE
            , W_SOB_ID              IN FI_CLOSING_ENDING_AMOUNT.SOB_ID%TYPE
            )
  AS
  BEGIN
    OPEN P_CURSOR FOR
      SELECT NVL(SX1.PERIOD_NAME, W_PERIOD_NAME) AS PERIOD_NAME
           , AC.ACCOUNT_CONTROL_ID
           , AC.ACCOUNT_CODE
           , AC.ACCOUNT_DESC
           , NVL(SX1.ENDING_AMOUNT, 0) AS ENDING_AMOUNT
           , SX1.REMARK
        FROM FI_CLOSING_ENDING_ACCOUNT_V EA
          , FI_ACCOUNT_CONTROL AC
          , ( SELECT CEA.ACCOUNT_CONTROL_ID
                  , CEA.PERIOD_NAME
                  , CEA.ENDING_AMOUNT
                  , CEA.REMARK
                FROM FI_CLOSING_ENDING_AMOUNT CEA
              WHERE CEA.PERIOD_NAME             = W_PERIOD_NAME
                AND CEA.ACCOUNT_CONTROL_ID      = NVL(W_ACCOUNT_CONTROL_ID, CEA.ACCOUNT_CONTROL_ID)
                AND CEA.SOB_ID                  = W_SOB_ID
             ) SX1   
      WHERE EA.ENDING_ACCOUNT_CODE      = AC.ACCOUNT_CODE
        AND EA.SOB_ID                   = AC.SOB_ID
        AND AC.ACCOUNT_CONTROL_ID       = SX1.ACCOUNT_CONTROL_ID(+)  
        AND AC.ACCOUNT_CONTROL_ID       = NVL(W_ACCOUNT_CONTROL_ID, AC.ACCOUNT_CONTROL_ID)
        AND AC.SOB_ID                   = W_SOB_ID
      ORDER BY 3
      ;
  END SELECT_ENDING_AMOUNT;

-- 기말금액 INSERT.
  PROCEDURE INSERT_ENDING_AMOUNT
            ( P_PERIOD_NAME        IN FI_CLOSING_ENDING_AMOUNT.PERIOD_NAME%TYPE
            , P_ACCOUNT_CONTROL_ID IN FI_CLOSING_ENDING_AMOUNT.ACCOUNT_CONTROL_ID%TYPE
            , P_SOB_ID             IN FI_CLOSING_ENDING_AMOUNT.SOB_ID%TYPE
            , P_ORG_ID             IN FI_CLOSING_ENDING_AMOUNT.ORG_ID%TYPE
            , P_ENDING_AMOUNT      IN FI_CLOSING_ENDING_AMOUNT.ENDING_AMOUNT%TYPE
            , P_REMARK             IN FI_CLOSING_ENDING_AMOUNT.REMARK%TYPE
            , P_USER_ID            IN FI_CLOSING_ENDING_AMOUNT.CREATED_BY%TYPE 
            )
  AS
    V_SYSDATE DATE := GET_LOCAL_DATE(P_SOB_ID);
    V_RECORD_COUNT    NUMBER := 0;
  BEGIN
    BEGIN
      SELECT COUNT(CEA.PERIOD_NAME) AS RECORD_COUNT
        INTO V_RECORD_COUNT
        FROM FI_CLOSING_ENDING_AMOUNT CEA
      WHERE CEA.PERIOD_NAME             = P_PERIOD_NAME
        AND CEA.ACCOUNT_CONTROL_ID      = P_ACCOUNT_CONTROL_ID
        AND CEA.SOB_ID                  = P_SOB_ID
      ;
    EXCEPTION WHEN OTHERS THEN
      V_RECORD_COUNT := 0;
    END;
    IF V_RECORD_COUNT <> 0 THEN
      RAISE ERRNUMS.Exist_Data;
    END IF;
    
    INSERT INTO FI_CLOSING_ENDING_AMOUNT
    ( PERIOD_NAME
    , ACCOUNT_CONTROL_ID 
    , SOB_ID 
    , ORG_ID 
    , ENDING_AMOUNT 
    , REMARK 
    , CREATION_DATE 
    , CREATED_BY 
    , LAST_UPDATE_DATE 
    , LAST_UPDATED_BY )
    VALUES
    ( P_PERIOD_NAME
    , P_ACCOUNT_CONTROL_ID
    , P_SOB_ID
    , P_ORG_ID
    , P_ENDING_AMOUNT
    , P_REMARK
    , V_SYSDATE
    , P_USER_ID
    , V_SYSDATE
    , P_USER_ID );
     
  EXCEPTION
    WHEN ERRNUMS.Exist_Data THEN
      RAISE_APPLICATION_ERROR(ERRNUMS.Exist_Data_Code, ERRNUMS.Exist_Data_Desc);
  END INSERT_ENDING_AMOUNT;

-- 기말금액 UPDATE.
  PROCEDURE UPDATE_ENDING_AMOUNT
            ( W_PERIOD_NAME        IN FI_CLOSING_ENDING_AMOUNT.PERIOD_NAME%TYPE
            , W_ACCOUNT_CONTROL_ID IN FI_CLOSING_ENDING_AMOUNT.ACCOUNT_CONTROL_ID%TYPE
            , W_SOB_ID             IN FI_CLOSING_ENDING_AMOUNT.SOB_ID%TYPE
            , P_ENDING_AMOUNT      IN FI_CLOSING_ENDING_AMOUNT.ENDING_AMOUNT%TYPE
            , P_REMARK             IN FI_CLOSING_ENDING_AMOUNT.REMARK%TYPE
            , P_USER_ID            IN FI_CLOSING_ENDING_AMOUNT.CREATED_BY%TYPE 
            )
  AS
    V_SYSDATE DATE := GET_LOCAL_DATE(W_SOB_ID);
  BEGIN
    
    UPDATE FI_CLOSING_ENDING_AMOUNT
      SET ENDING_AMOUNT      = P_ENDING_AMOUNT
        , REMARK             = P_REMARK
        , LAST_UPDATE_DATE   = V_SYSDATE
        , LAST_UPDATED_BY    = P_USER_ID
    WHERE PERIOD_NAME        = W_PERIOD_NAME
      AND ACCOUNT_CONTROL_ID = W_ACCOUNT_CONTROL_ID
      AND SOB_ID             = W_SOB_ID
    ;    
    IF SQL%ROWCOUNT = 0 THEN
      INSERT_ENDING_AMOUNT
          ( W_PERIOD_NAME
          , W_ACCOUNT_CONTROL_ID
          , W_SOB_ID
          , 201
          , P_ENDING_AMOUNT
          , P_REMARK
          , P_USER_ID 
          );
    END IF;   
  
  END UPDATE_ENDING_AMOUNT;

-- 기말금액 DELETE.
  PROCEDURE DELETE_ENDING_AMOUNT
            ( W_PERIOD_NAME        IN FI_CLOSING_ENDING_AMOUNT.PERIOD_NAME%TYPE
            , W_ACCOUNT_CONTROL_ID IN FI_CLOSING_ENDING_AMOUNT.ACCOUNT_CONTROL_ID%TYPE
            , W_SOB_ID             IN FI_CLOSING_ENDING_AMOUNT.SOB_ID%TYPE
            )
  AS
  BEGIN
    DELETE FROM FI_CLOSING_ENDING_AMOUNT
    WHERE PERIOD_NAME        = W_PERIOD_NAME
      AND ACCOUNT_CONTROL_ID = W_ACCOUNT_CONTROL_ID
      AND SOB_ID             = W_SOB_ID
      ;
  
  END DELETE_ENDING_AMOUNT;

-- 결산금액 조회.
  PROCEDURE SELECT_CLOSING_AMOUNT
            ( P_CURSOR1             OUT TYPES.TCURSOR1
            , W_PERIOD_NAME         IN FI_CLOSING_ENDING_AMOUNT.PERIOD_NAME%TYPE
            , W_ACCOUNT_CONTROL_ID  IN FI_CLOSING_ENDING_AMOUNT.ACCOUNT_CONTROL_ID%TYPE
            , W_SOB_ID              IN FI_CLOSING_ENDING_AMOUNT.SOB_ID%TYPE
            )
  AS
  BEGIN
    OPEN P_CURSOR1 FOR
      SELECT CA.PERIOD_NAME
           , CA.CLOSING_GROUP
           , FI_COMMON_G.CODE_NAME_F('CLOSING_GROUP', CA.CLOSING_GROUP, CA.SOB_ID) AS CLOSING_GROUP_NAME
           , CA.ACCOUNT_CONTROL_ID
           , CA.ACCOUNT_CODE
           , AC.ACCOUNT_DESC           
           , CA.AMOUNT
           , CA.REMARK
        FROM FI_CLOSING_AMOUNT CA
          , FI_ACCOUNT_CONTROL AC
      WHERE CA.ACCOUNT_CONTROL_ID       = AC.ACCOUNT_CONTROL_ID
        AND CA.PERIOD_NAME              = W_PERIOD_NAME
        AND CA.ACCOUNT_CONTROL_ID       = NVL(W_ACCOUNT_CONTROL_ID, CA.ACCOUNT_CONTROL_ID)
        AND CA.SOB_ID                   = W_SOB_ID
      ORDER BY CA.CLOSING_GROUP, CA.ACCOUNT_CODE
      ;
  END SELECT_CLOSING_AMOUNT;

-- 결산분개 조회.
  PROCEDURE SELECT_CLOSING_SLIP
            ( P_CURSOR2             OUT TYPES.TCURSOR2
            , W_PERIOD_NAME         IN FI_CLOSING_ENDING_AMOUNT.PERIOD_NAME%TYPE
            , W_ACCOUNT_CONTROL_ID  IN FI_CLOSING_ENDING_AMOUNT.ACCOUNT_CONTROL_ID%TYPE
            , W_SOB_ID              IN FI_CLOSING_ENDING_AMOUNT.SOB_ID%TYPE
            )
  AS
  BEGIN
    OPEN P_CURSOR2 FOR
      SELECT FCS.SLIP_DATE
           , FCS.SLIP_NUM
           , FCS.ACCOUNT_CONTROL_ID
           , FCS.ACCOUNT_CODE
           , AC.ACCOUNT_DESC
           , FCS.ACCOUNT_DR_CR
           , FI_COMMON_G.CODE_NAME_F('ACCOUNT_DR_CR', FCS.ACCOUNT_DR_CR, FCS.SOB_ID) AS ACCOUNT_DR_CR_NAME
           , DECODE(FCS.ACCOUNT_DR_CR, '1', FCS.GL_AMOUNT, 0) AS DR_AMOUNT
           , DECODE(FCS.ACCOUNT_DR_CR, '2', FCS.GL_AMOUNT, 0) AS CR_AMOUNT
           , FCS.REMARK
           , FCS.DEPT_ID
           , FI_DEPT_MASTER_G.DEPT_NAME_F(FCS.DEPT_ID) AS DEPT_NAME
           , FCS.PERSON_ID
           , HRM_PERSON_MASTER_G.NAME_F(FCS.PERSON_ID) AS PERSON_NAME
           , FCS.SLIP_TYPE
           , FI_COMMON_G.CODE_NAME_F('SLIP_TYPE', FCS.SLIP_TYPE, FCS.SOB_ID) AS SLIP_TYPE_NAME
        FROM FI_CLOSING_SLIP FCS
          , FI_ACCOUNT_CONTROL AC
      WHERE FCS.ACCOUNT_CONTROL_ID      = AC.ACCOUNT_CONTROL_ID
        AND FCS.PERIOD_NAME             = W_PERIOD_NAME
        AND FCS.ACCOUNT_CONTROL_ID      = NVL(W_ACCOUNT_CONTROL_ID, FCS.ACCOUNT_CONTROL_ID)
        AND FCS.SOB_ID                  = W_SOB_ID
      ORDER BY FCS.SLIP_LINE_SEQ
      ;
  END SELECT_CLOSING_SLIP;

-- 결산분개 합계 금액 조회.
  PROCEDURE CLOSING_SLIP_SUM_P
            ( W_PERIOD_NAME         IN FI_CLOSING_ENDING_AMOUNT.PERIOD_NAME%TYPE
            , W_ACCOUNT_CONTROL_ID  IN FI_CLOSING_ENDING_AMOUNT.ACCOUNT_CONTROL_ID%TYPE
            , W_SOB_ID              IN FI_CLOSING_ENDING_AMOUNT.SOB_ID%TYPE
            , O_DR_AMOUNT           OUT NUMBER
            , O_CR_AMOUNT           OUT NUMBER
            , O_GAP_AMOUNT          OUT NUMBER
            )
  AS
  BEGIN
    BEGIN
      SELECT NVL(SUM(DECODE(FCS.ACCOUNT_DR_CR, '1', FCS.GL_AMOUNT, 0)), 0) AS DR_AMOUNT
           , NVL(SUM(DECODE(FCS.ACCOUNT_DR_CR, '2', FCS.GL_AMOUNT, 0)), 0) AS CR_AMOUNT
        INTO O_DR_AMOUNT
           , O_CR_AMOUNT
        FROM FI_CLOSING_SLIP FCS
          , FI_ACCOUNT_CONTROL AC
      WHERE FCS.ACCOUNT_CONTROL_ID      = AC.ACCOUNT_CONTROL_ID
        AND FCS.PERIOD_NAME             = W_PERIOD_NAME
        AND FCS.ACCOUNT_CONTROL_ID      = NVL(W_ACCOUNT_CONTROL_ID, FCS.ACCOUNT_CONTROL_ID)
        AND FCS.SOB_ID                  = W_SOB_ID
      ;
    EXCEPTION
      WHEN OTHERS THEN
        O_DR_AMOUNT := 0;
        O_CR_AMOUNT := 0;
    END;
    O_GAP_AMOUNT := ABS(NVL(O_DR_AMOUNT, 0) - NVL(O_CR_AMOUNT, 0)) * -1;    
  END CLOSING_SLIP_SUM_P;
  
-- 회계계정관리 LOOKUP 조회.
  PROCEDURE LU_ACCOUNT_CONTROL_CODE
            ( P_CURSOR3              OUT TYPES.TCURSOR3
            , W_SOB_ID               IN FI_ACCOUNT_CONTROL.SOB_ID%TYPE
            , W_ENABLED_YN           IN FI_ACCOUNT_CONTROL.ENABLED_FLAG%TYPE
            )
  AS
    V_STD_DATE                       DATE := NULL;

  BEGIN
    IF W_ENABLED_YN = 'Y' THEN
      V_STD_DATE := GET_LOCAL_DATE(W_SOB_ID);
    END IF;

    OPEN P_CURSOR3 FOR
      SELECT AC.ACCOUNT_CODE
           , AC.ACCOUNT_DESC
           , AC.ACCOUNT_CONTROL_ID
        FROM FI_ACCOUNT_CONTROL AC
       WHERE AC.ACCOUNT_SET_ID          = FI_ACCOUNT_BOOK_G.OPERATING_ACCOUNT_SET_F(W_SOB_ID)
         AND AC.SOB_ID                  = W_SOB_ID
         AND AC.ENABLED_FLAG            = DECODE(W_ENABLED_YN, 'Y', 'Y', AC.ENABLED_FLAG)
         AND AC.EFFECTIVE_DATE_FR       <= NVL(V_STD_DATE, AC.EFFECTIVE_DATE_FR)
         AND (AC.EFFECTIVE_DATE_TO IS NULL OR AC.EFFECTIVE_DATE_TO >= NVL(V_STD_DATE, AC.EFFECTIVE_DATE_TO))
         AND EXISTS ( SELECT 'X'
                        FROM FI_COMMON FC
                      WHERE FC.GROUP_CODE   = 'CLOSING_ENDING_ACCOUNT'
                        AND FC.SOB_ID       = AC.SOB_ID
                        AND FC.CODE         = AC.ACCOUNT_CODE
                        AND FC.ENABLED_FLAG = DECODE(W_ENABLED_YN, 'Y', 'Y', FC.ENABLED_FLAG)
                        AND FC.EFFECTIVE_DATE_FR  <= NVL(V_STD_DATE, FC.EFFECTIVE_DATE_FR)
                        AND (FC.EFFECTIVE_DATE_TO IS NULL OR FC.EFFECTIVE_DATE_TO >= NVL(V_STD_DATE, FC.EFFECTIVE_DATE_TO))
                    )
      ORDER BY AC.ACCOUNT_CODE
      ;

  END  LU_ACCOUNT_CONTROL_CODE;
  
END FI_CLOSING_ENDING_AMOUNT_G;
/
